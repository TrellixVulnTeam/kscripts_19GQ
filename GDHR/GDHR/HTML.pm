package GDHR::HTML;
#-------------------------------------------------+
#    [APM] This moudle was generated by amp.pl    |
#    [APM] Created time: 2016-01-13 11:36:57      |
#-------------------------------------------------+
=pod

=head2 v1.0

Date: 2016-01-13 11:36:57

=head2 v1.1

Date: 01/20/2016 01:52:16 PM
Update: add the help tag for each function

=head2 v1.2 

Date: 05/17/2016 09:00:55 AM
Update: 

=head2 v1.2.6

Date: 06/08/2017 11:37:14 AM

=head1 Name

HTML -- used to edit the content report html file 

=head1 Synopsis

This module is not meant to be used directly

=head1 Feedback

Author: Peng Ai
Email:  aipeng0520@163.com

=head1 Version

Version history

=cut


use strict;
use warnings;

require Exporter;
our @ISA = qw(Exporter);

use File::Basename qw/basename/;

use GDHR::DEBUG;
use GDHR;

# return the object of HTML
sub new {
    my ($class, $parent, %opts) = @_;
    $opts{'-class'} ||= "normal_cont";
    $opts{'-tag'} ||= "div";
    my $tag = $opts{'-tag'};

    my $hash = { menu_cnt => 0 };
    my $attrs = opts2attrs(%opts);

    $hash->{head} = <<HTML;
<$tag $attrs>
HTML

    $hash->{tail} = "</$tag>\n";
    $hash->{main} = "";

    bless $hash, $class;
    return $hash;
}

# return the object of HTML with tag 'section'
sub section {
    my ($class, $parent, %opts) = @_;
    my $company = $parent->{company_fullname};
    my $url = $parent->{url};

    $opts{'class'} ||= "normal_cont";

    my $hash = {};
    my $attrs = opts2attrs(%opts);

    $hash->{head} = <<HTML;
<section $attrs>
HTML

    my $split_line = <<HTML;
<p class="head">
    <hr />
</p>
<br /><br />
HTML
    $hash->{tail} = "</section>\n";
    $hash->{main} = "";
    $hash->{parent} = $parent;
    $hash->{nonlazy} = $parent->{nonlazy};

    if ($opts{'-break'} || $opts{'-split'}) {
        $hash->{head} = <<HTML;
<div style="page-break-after:always;"></div>
$split_line
$hash->{head}
HTML
    }
    elsif ($opts{'-page_head'}) {
        $hash->{head} = <<HTML;
$split_line
$hash->{head}
HTML
    }

    bless $hash, $class;
    return $hash;
}

# add the <h3> to HTML object
sub menu {
    my ($class, $str, %opts) = @_;

    $class->{parent}->{menu_cnt}++;
    $class->{parent}->{submenu_cnt} = 1;
    $class->{parent}->{img_cnt} = 0;
    $class->{parent}->{tab_cnt} = 0;
    my $order = $class->{parent}->{menu_cnt};

    if (defined $opts{'-check'}) {
        $str .= $opts{'-check'} == 1 ? qq(<img class="check_icon" src="src/image/yes.png">) :
            $opts{'-check'} == 2 ? qq(<img class="check_icon" src="src/image/warn.png">) :
                $opts{'-check'} == 0 ? qq(<img class="check_icon" src="src/image/no.png">) : "";
    }

    my $attrs = opts2attrs(%opts);
    my $help = &help(%opts);
    my $html = qq(<h3 $attrs>$order $str$help</h3>\n);
    $opts{'-return'} ? return $html : $class->add_html($html);
}

# add the <h5> to HTML object
sub submenu {
    my ($class, $str, %opts) = @_;

    $class->{parent}->{img_cnt} = 0;
    $class->{parent}->{tab_cnt} = 0;
    my $order = "$class->{parent}->{menu_cnt}.$class->{parent}->{submenu_cnt} ";
    $class->{parent}->{submenu_cnt}++;
    $class->{parent}->{ssubmenu_cnt} = 1;

    if (defined $opts{'-check'}) {
        $str .= $opts{'-check'} == 1 ? qq(<img class="check_icon" src="src/image/yes.png">) :
            $opts{'-check'} == 2 ? qq(<img class="check_icon" src="src/image/warn.png">) :
                $opts{'-check'} == 0 ? qq(<img class="check_icon" src="src/image/no.png">) : "";
    }

    my $attrs = opts2attrs(%opts);
    my $help = &help(%opts);
    my $html = qq(<h5 $attrs>$order $str$help</h5>\n);
    $opts{'-return'} ? return $html : $class->add_html($html);
}

# add the <h4> to HTML object
sub ssubmenu {
    my ($class, $str, %opts) = @_;

    #    $class->{parent}->{img_cnt} = 0;
    #    $class->{parent}->{tab_cnt} = 0;
    my $submenu_order = $class->{parent}->{submenu_cnt} - 1;
    my $order = "$class->{parent}->{menu_cnt}.$submenu_order.$class->{parent}->{ssubmenu_cnt} ";
    $class->{parent}->{ssubmenu_cnt}++;

    if (defined $opts{'-check'}) {
        $str .= $opts{'-check'} == 1 ? qq(<img class="check_icon" src="src/image/yes.png">) :
            $opts{'-check'} == 2 ? qq(<img class="check_icon" src="src/image/warn.png">) :
                $opts{'-check'} == 0 ? qq(<img class="check_icon" src="src/image/no.png">) : "";
    }

    my $attrs = opts2attrs(%opts);
    my $help = &help(%opts);
    my $html = qq(<h4 $attrs>$order $str$help</h4>\n);
    $opts{'-return'} ? return $html : $class->add_html($html);
}

## 返回section当前所在的菜单层级
## Author: xushuyang
sub which_menu {
    my $self = shift;

    if ($self->{parent}->{menu_cnt} == 0 || $self->{main} eq '') {
        return 0; ## pre menu
    }
    elsif (exists $self->{parent}->{submenu_cnt} && $self->{parent}->{submenu_cnt} == 1) {
        return 1; ## menu
    }
    elsif (exists $self->{parent}->{ssubmenu_cnt} && $self->{parent}->{ssubmenu_cnt} == 1) {
        return 2; ## submenu
    }
    else {
        return 3; ## ssubmenu
    }
}

## add menu to next level 
sub next_level_menu {
    my $self = shift;

    my $level = $self->which_menu();

    $level == 0 ? $self->menu(@_) :
        $level == 1 ? $self->submenu(@_) :
            $level == 2 ? $self->ssubmenu(@_) : ERROR("<ssubmenu> is the last level menu already!");
}

## 将图片“合并”展示, 返回<table>
## 与R包cowplot::plot_grid功能类似
## Author: xushuyang
sub plot_grid {
    my $self = shift;
    my %opts = @_;

    my $files = $opts{'-files'} or ERROR("-files must be defined in function <plot_grid>");
    my $nfiles = @$files;

    $opts{'-byrow'} //= 1;

    use POSIX qw/ceil/;
    if (exists $opts{'-ncol'} && exists $opts{'-nrow'}) {
        ERROR("function <plot_grid> : -ncol x -nrow must be larger or equal than the number of -files.") if $opts{'-ncol'} * $opts{'-nrow'} < $nfiles;
    }
    elsif (exists $opts{'-ncol'}) {
        ERROR("function <plot_grid> : -ncol must be larger than 0.") if !$opts{'-ncol'};
        $opts{'-nrow'} = POSIX::ceil($nfiles / $opts{'-ncol'});
    }
    elsif (exists $opts{'-nrow'}) {
        ERROR("function <plot_grid> : -nrow must be larger than 0.") if !$opts{'-nrow'};
        $opts{'-ncol'} = POSIX::ceil($nfiles / $opts{'-nrow'});
    }
    else {
        if ($opts{'-byrow'}) {
            $opts{'-ncol'} = POSIX::ceil(sqrt($nfiles));
            $opts{'-nrow'} = POSIX::ceil($nfiles / $opts{'-ncol'});
        }
        else {
            $opts{'-nrow'} = POSIX::ceil(sqrt($nfiles));
            $opts{'-ncol'} = POSIX::ceil($nfiles / $opts{'-nrow'});
        }
    }

    my $colspan = 1;
    my $out = "<div><table class='pic_table'><tbody>";
    if ($opts{'-byrow'}) {
        my $max_col = $nfiles < $opts{'-ncol'} ? $nfiles : $opts{'-ncol'};
        while (@$files && $opts{'-nrow'}--) {
            my @files_in_a_row = map {$self->_img2html(-file => $_)} splice @$files, 0, $max_col;
            push @files_in_a_row, ('') x ($max_col - @files_in_a_row); ## in case files number is less than max_col
            $out .= join '', "<tr>", (map {"<td>$_</td>"} @files_in_a_row), "</tr>";
        }
        $colspan = $max_col;
    }
    else {
        my $max_row = $nfiles < $opts{'-nrow'} ? $nfiles : $opts{'-nrow'};
        my @t; ## t for transpose
        while (@$files && $opts{'-ncol'}--) {
            my @files_in_a_col = map {$self->_img2html(-file => $_)} splice @$files, 0, $max_row;
            push @files_in_a_col, ('') x ($max_row - @files_in_a_col);
            push @t, \@files_in_a_col;
        }
        for my $i (0 .. $max_row - 1) {
            $out .= join '', "<tr>", (map {"<td>$_</td>"} map {$_->[$i]} @t), "</tr>";
        }
        $colspan = @t;
    }
    if (exists $opts{'-name'}) {
        my $order = $self->img_order();
        $out .= "<tr><td colspan='$colspan' class='img_title'>$order $opts{'-name'}</td></tr>";
    }
    $out .= "</tbody></table><p></p></div>";

    return $out;
}

# add <p> to HTML object
sub desc {
    my ($class, $str, %opts) = @_;

    my $attrs = opts2attrs(%opts);
    my $help = &help(%opts);

    if ($opts{'-pre'}) {
        $str = "<pre>$str</pre>";
    }

    my $html = qq(<p $attrs>$str$help</p>\n);

    $opts{'-return'} ? return $html : $class->add_html($html);
}

# turn files list to <ul> and <li>, with file description (must be defined)
sub files2list {
    my ($class, %opts) = @_;

    my $files = $opts{'-files'} or ERROR("-files must be defined in function <files2list>");
    my $desc = $opts{'-desc'} or ERROR("-desc must be defined in function <files2list>");
    my $short_dir = $opts{'-short_dir'} // 0;

    @$files = map {s/^\.\./\./r} @$files;
    my @fnames = map {$short_dir ? basename($_) : s/^\.\.//r;} @$files;

    my @lies = map {qq(<li>$desc->[$_]: <a href="$files->[$_]" target="_blank">$fnames[$_]</a></li>)} 0 .. $#$files;
    my $li = join "\n", @lies;

    my $attrs = opts2attrs(%opts);

    my $html = <<HTML;
<ul $attrs>
$li
</ul>
HTML

    $opts{'-return'} ? return $html : $class->add_html($html);
}

sub matrix2html {
    my ($class, %opts) = @_;

    my $top = $opts{top} ? $opts{top} : $opts{'-top'} ? $opts{'-top'} : 10;
    $opts{'-header'} = 1 if (!defined $opts{'-header'});
    my $matrix = $opts{'-matrix'} or ERROR("-matrix must be defined in function <matrix2html>");
    my $class_name = $opts{'-class'} || "func_table";
    my $width = $opts{'-width'} || "100%";

    my $caption = "";
    unless ($opts{'-no_order'}) {
        my $name = $opts{'-name'} or ERROR("-name must be defined in function <matrix2html>");
        my $help = &help(%opts);
        my $order = $class->tab_order();
        $caption = "<caption>$order $name$help</caption>";
    }

    my $tab = "";

    map {shift @$matrix} 1 .. $opts{'-skip'} if $opts{'-skip'};

    if ($opts{'-header'}) {
        my $header = shift @$matrix;
        my @values = @$header;
        @values = &omits_some_columns(\%opts, @values);

        @values = map {
            my $len = length $_;
            if ($opts{'-max_chars'} && $len - 4 > $opts{'-max_chars'}) {
                qq(<th class="abbrTab" data=$opts{'-max_chars'}>$_</th>);
            }
            else {
                "<th>$_</th>"
            }
        } @values;

        $tab .= "<thead><tr>" . ${[ join "", @values ]}[0] . "</tr></thead>\n"
    }

    $tab .= "<tbody>\n";

    my $i = 0;
    foreach (@$matrix) {
        $i++;
        last if $i > $top;

        my @values = @$_;
        @values = &omits_some_columns(\%opts, @values);

        @values = map {
            my $len = length $_;
            if ($opts{'-max_chars'} && $len - 4 > $opts{'-max_chars'}) {
                qq(<td class="abbrTab" data=$opts{'-max_chars'}>$_</td>);
            }
            else {
                "<td>$_</td>";
            }
        } @values;

        $tab .= "<tr>" . ${[ join "", @values ]}[0] . "</tr>\n";
    }

    $tab .= "</tbody>\n";

    my $html = <<HTML;
<table class="$class_name nowrap" width="$width">
    $caption
    $tab
</table>
<br />
HTML

    $opts{'-return'} ? return $html : $class->add_html($html);
}

# fetch the top lines of table, and turn it to html table
sub tsv2html {
    my ($class, %opts) = @_;

    # parse the options
    my $top = $opts{top} ? $opts{top} : $opts{'-top'} ? $opts{'-top'} : 10;
    $opts{'-header'} = 1 if (!defined $opts{'-header'});
    my $file = $opts{'-file'} or ERROR("-file must be defined in function <tsv2html>");
    my $class_name = $opts{'-class'} || "func_table";
    my $width = $opts{'-width'} || "100%";

    my $caption = "";
    unless ($opts{'-no_order'}) {
        my $name = $opts{'-name'} or ERROR("-name must be defined in function <tsv2html>");
        my $help = &help(%opts);
        my $order = $class->tab_order();
        $caption = "<caption>$order $name$help</caption>";
    }

    my $tab = "";
    open IN, $file or die "$file $!";
    my $ncol = 0;

    if ($opts{'-skip'}) {
        map {my $tmp = <IN>;} 1 .. $opts{'-skip'};
    }

    if ($opts{'-header'}) {
        my $header = <IN>;
        unless ($header) {
            ERROR("$file is empty, please check it !");
        }
        my @values = split /\t/, $header;
        chomp $values[-1];

        @values = &omits_some_columns(\%opts, @values);
        $ncol = scalar @values;

        @values = map {
            my $len = length $_;
            if ($opts{'-max_chars'} && $len - 4 > $opts{'-max_chars'}) {
                qq(<th class="abbrTab" data=$opts{'-max_chars'}>$_</th>);
            }
            else {
                "<th>$_</th>"
            }
        } @values;

        $tab .= "<thead><tr>" . ${[ join "", @values ]}[0] . "</tr></thead>\n"
    }

    $tab .= "<tbody>\n";

    my $i = 0;
    while (<IN>) {
        next if (/^#/);

        $i++;
        last if $i > $top;

        #my @values = split /\t/;
        # -force: force the columns number equals the header fields number
        my @values = $opts{'-force'} ? split /\t/, $_, $ncol : split /\t/;
        chomp $values[$#values];
        @values = &omits_some_columns(\%opts, @values);
        if ($ncol && $ncol != $#values + 1) {
            ERROR("the number of columns is not equals to the header in LINE $.", $file);
        }
        elsif (!$ncol) {
            $ncol = scalar @values;
        }

        @values = map {
            my $len = length $_;
            if ($opts{'-max_chars'} && $len - 4 > $opts{'-max_chars'}) {
                qq(<td class="abbrTab" data=$opts{'-max_chars'}>$_</td>);
            }
            else {
                "<td>$_</td>";
            }
        } @values;

        $tab .= "<tr>" . ${[ join "", @values ]}[0] . "</tr>\n";
    }
    close IN;

    $tab .= "</tbody>\n";

    my $html = <<HTML;
<table class="$class_name nowrap" width="$width">
    $caption
    $tab 
</table>
<br />
HTML

    $opts{'-return'} ? return $html : $class->add_html($html);
}

# add one image to the html 
sub img2html {
    my ($class, %opts) = @_;

    my $dir = $opts{'-file'} or ERROR("-file must be defined in function <img2html>");
    $dir =~ s/^\.\.\///;
    $dir =~ s/^image/src\/image/;
    my $name = $opts{'-name'} or ERROR("-name must be defined in function <img2html>");
    my $width = $opts{'-width'} || "auto";
    my $help = &help(%opts);

    my $src = $class->{'nonlazy'} ? "src" : "data-src";

    my $order = $class->img_order();

    my $html;
    if ($opts{'-desc'}) {
        $html = <<HTML;
<table class="pic_table">
    <tr>
        <td style="width: $width"><a href="$dir" target="_blank"><img $src="$dir" onerror="this.src='src/image/blank.png'"/></td>
        <td class="pic_table_desc" style="width: 50%"><p>$opts{'-desc'}</p></td>
    </tr>
    <tr>
        <td class="img_title">$order $name$help</td>
        <td></td>
    </tr>
</table>
HTML

    }
    else {
        $html = <<HTML;
<table class="pic_table">
    <tr>
        <td><a href="$dir" target="_blank"><img $src="$dir" onerror="this.src='src/image/blank.png'" width="$width"/></td>
    </tr>
    <tr>
        <td class="img_title">$order $name$help</td>
    </tr>
</table>
<br />
HTML
    }

    $opts{'-return'} ? return $html : $class->add_html($html);
}

# add two images to the html
sub img2html2 {
    my ($class, %opts) = @_;

    my $file1 = $opts{'-file1'} or ERROR("-file1 must be defined in function <img2html>");
    my $name1 = $opts{'-name1'} or ERROR("-name1 must be defined in function <img2html>");
    my $file2 = $opts{'-file2'} or ERROR("-file2 must be defined in function <img2html>");
    my $name2 = $opts{'-name2'} or ERROR("-name2 must be defined in function <img2html>");
    $file1 =~ s/^\.\.\///;
    $file2 =~ s/^\.\.\///;
    $file1 =~ s/^image/src\/image/;
    $file2 =~ s/^image/src\/image/;

    my $desc1 = $opts{'-desc1'} || "";
    my $desc2 = $opts{'-desc2'} || "";

    my $order1 = $class->img_order();
    my $order2 = $class->img_order();

    my $help1 = $opts{'-help1'} ? &help('-help' => $opts{'-help1'}) : "";
    my $help2 = $opts{'-help2'} ? &help('-help' => $opts{'-help2'}) : "";

    my $space = $opts{'-space'} || 10;
    my $width = (100 - $space) / 2;

    my $src = $class->{'nonlazy'} ? "src" : "data-src";

    my $html = <<HTML;
<table class="pic_table">
    <tr>
        <td style="width: $width%"><a href="$file1" target="_blank"><img $src="$file1" onerror="this.src='src/image/blank.png'" /></a></td>
        <td style="width: $space%"></td>
        <td style="width: $width%"><a href="$file2" target="_blank"><img $src="$file2" onerror="this.src='src/image/blank.png'" /></a></td>
    </tr>
    <tr>
        <td class="img_title">$order1 $name1$help1</td>
        <td style="width: $space%"></td>
        <td class="img_title">$order2 $name2$help2</td>
    </tr>
    <tr>
        <td align="left">$desc1</td>
        <td style="width: $space%"></td>
        <td align="left">$desc2</td>
    </tr>
</table>
<br />
HTML

    $opts{'-return'} ? return $html : $class->add_html($html);
}

# add multi images to the html 
sub imgs2html {
    my ($class, %opts) = @_;

    my $images = $opts{'-files'} or ERROR("-files must be defined in function <imgs2html>");
    my $names = $opts{'-names'} or ERROR("-names must be defined in function <imgs2html>");

    # defined the img title and its description
    my $name = $opts{'-name'} || "";
    my $note = $opts{'-note'} || "";
    my $help = &help(%opts);
    my $order = $class->img_order();
    if ($note) {
        $name = <<TEMP;
<div>
    <p class="img_title">$order $name$help</p>
    <p class="img_note">$note</p><br /><br />
</div>
TEMP
    }
    else {
        $name = <<TEMP;
<div>
    <p class="img_title">$order $name$help</p>
</div>
TEMP
    }

    my $resp_tabs_cnt = $class->{parent}->{resp_vtabs_cnt};
    $class->{parent}->{resp_vtabs_cnt}++;

    ERROR("the number of names is not equal to the number of images") unless $#$names == $#$images;

    my $names_li = "";
    foreach (@$names) {
        $names_li .= <<TEMP;
        <li>$_</li>
TEMP
    }

    my $images_div = "";
    my $i = 0;
    my $src = $class->{'nonlazy'} ? "src" : "data-src";
    foreach (@$images) {
        s/^\.\.\///;
        if ($opts{'-desc'}) {
            $images_div .= <<TEMP;
        <div>
            <div height="80%"><a href="$_" target="_blank"><img $src="$_" onerror="this.src='src/image/blank.png'" /></a></div>
            <div height="20%"><p>$opts{'-desc'}->[$i]</p></div>
        </div>
TEMP
        }
        else {
            $images_div .= <<TEMP;
        <div>
            <a href="$_" target="_blank"><img $src="$_" onerror="this.src='src/image/blank.png'" /></a>
        </div>
TEMP
        }
        $i++;
    }

    $images_div = "" unless $class->{'nonlazy'};

    my $html = <<HTML;
<div id="parentVerticalTab$resp_tabs_cnt" class="VerticalTab">
    <ul id="resp-vtabs-list$resp_tabs_cnt" class="resp-tabs-list hor_$resp_tabs_cnt">
$names_li
    </ul>
    <div id="resp-vtabs-container$resp_tabs_cnt" class="resp-tabs-container hor_$resp_tabs_cnt">
$images_div
    </div>
    $name
</div>
<br />
HTML

    $class->imgs_into_json(-files => $images, -order => $resp_tabs_cnt, -type => "parentVerticalTab") unless $class->{'nonlazy'};
    $opts{'-return'} ? return $html : $class->add_html($html);
}

# add multi images to the html with two columns
sub imgs2html2 {
    my ($class, %opts) = @_;

    my $images1 = $opts{'-files1'} or ERROR("-files1 must be defined in function <imgs2html>");
    my $images2 = $opts{'-files2'} or ERROR("-files2 must be defined in function <imgs2html>");
    my $desc1 = $opts{'-desc1'};
    my $desc2 = $opts{'-desc2'};
    my $names = $opts{'-names'} or ERROR("-names must be defined in function <imgs2html>");

    # defined the img title and its description
    my $name = $opts{'-name'} || "";
    my $note = $opts{'-note'} || "";
    my $help = &help(%opts);
    my $order = $class->img_order();
    if ($note) {
        $name = <<TEMP;
<div>
    <p class="img_title">$order $name$help</p>
    <p class="img_note">$note</p><br /><br />
</div>
TEMP
    }
    else {
        $name = <<TEMP;
<div>
    <p class="img_title">$order $name$help</p>
</div>
TEMP
    }

    my $resp_tabs_cnt = $class->{parent}->{resp_vtabs_cnt};
    $class->{parent}->{resp_vtabs_cnt}++;

    ERROR("the number of names is not equal to the number of images1") unless $#$names == $#$images1;
    ERROR("the number of names is not equal to the number of images2") unless $#$names == $#$images2;

    my $src = $class->{'nonlazy'} ? "src" : "data-src";
    my $names_li = "";
    foreach (@$names) {
        $names_li .= <<TEMP;
        <li>$_</li>
TEMP
    }

    my $images_div = "";
    my @tabs;
    foreach (0 .. $#$images1) {
        $images1->[$_] =~ s/^\.\.\///;
        $images2->[$_] =~ s/^\.\.\///;

        my @tds;
        if ($opts{'-desc1'} && $opts{'-desc2'}) {
            $images_div .= <<TEMP;
<div>
<table class="pic_table">
        <tr>
            <td>
                <a href="$images1->[$_]" target="_blank"><img $src="$images1->[$_]" onerror="this.src='src/image/blank.png'" /></a>
                <p>$desc1->[$_]</p>
            </td>
            <td>
                <a href="$images2->[$_]" target="_blank"><img $src="$images2->[$_]" onerror="this.src='src/image/blank.png'" /></a>
                <p>$desc2->[$_]</p>
            </td>
        </tr>
</table>
</div>
TEMP
            @tds = (qq("$images1->[$_]"), qq("$desc1->[$_]"), qq("$images2->[$_]"), qq("$desc2->[$_]"));
        }
        else {
            $images_div .= <<TEMP;
<div>
<table class="pic_table">
        <tr>
            <td>
                <a href="$images1->[$_]" target="_blank"><img $src="$images1->[$_]" onerror="this.src='src/image/blank.png'" /></a>
            </td>
            <td>
                <a href="$images2->[$_]" target="_blank"><img $src="$images2->[$_]" onerror="this.src='src/image/blank.png'" /></a>
            </td>
        </tr>
        <tr>
            <td></td>
            <td></td>
        </tr>
</table>
</div>
TEMP
            @tds = (qq("$images1->[$_]"), qq(""), qq("$images2->[$_]"), qq(""));
        }
        my $tds = join ",\n", @tds;
        push @tabs, qq("tb$_":[$tds]);
    }

    $images_div = "" unless $class->{nonlazy};

    my $html = <<HTML;
<div id="parentVerticalTab$resp_tabs_cnt" class="VerticalTab">
    <ul id="resp-vtabs-list$resp_tabs_cnt" class="resp-tabs-list hor_$resp_tabs_cnt">
$names_li
    </ul>
    <div id="resp-vtabs-container$resp_tabs_cnt" class="resp-tabs-container hor_$resp_tabs_cnt">
$images_div
    </div>
    $name
</div>
<br />
HTML

    $class->{parent}->{getPic} .= "\t\t\t\taddTabPic(res.container$resp_tabs_cnt, $resp_tabs_cnt)\n";
    my $tabs = join ",\n", @tabs;
    $class->{parent}->{json} .= <<JSON;
"container$resp_tabs_cnt":{
    $tabs
},
JSON

    $opts{'-return'} ? return $html : $class->add_html($html);
}

#-------------------------------------------------------------------------------
# set the title of figure or table
sub title {
    my ($class, %opts) = @_;

    # defined the img/table title and its description
    my $name = $opts{'-name'} || "";
    return $name unless $opts{'-type'};

    my $note = $opts{'-note'} || "";
    my $help = &help(%opts);
    my $order = $opts{'-type'} eq "image" ? $class->img_order() : $class->tab_order();
    if ($note) {
        $name = <<TEMP;
<div>
    <p class="img_title">$order $name$help</p>
    <p class="img_note">$note</p><br /><br />
</div>
TEMP
    }
    else {
        $name = <<TEMP;
<div>
    <p class="img_title">$order $name$help</p>
</div>
TEMP
    }

    return $name;
}

# turn img to html
sub _img2html {
    my ($class, %opts) = @_;

    my $file = $opts{'-file'} or ERROR("-file must be defined in function <_img2html>");
    $file =~ s/^\.\.\///;

    my $html = "";

    if ($opts{'-desc'}) {
        $html = <<TEMP;
            <div height="80%"><a href="$file" target="_blank"><img src="$file" onerror="this.src='src/image/blank.png'" /></a></div>
            <div height="20%"><p>$opts{'-desc'}</p></div>
TEMP
    }
    else {
        $html = qq(<a href="$file" target="_blank"><img src="$file" onerror="this.src='src/image/blank.png'" /></a>);
    }

    return $html;
}

# fetch the top lines of table, and turn it to html table
sub _tsv2html {
    my ($class, %opts) = @_;

    # parse the options
    my $top = $opts{top} ? $opts{top} : $opts{'-top'} ? $opts{'-top'} : 10;
    $opts{'-header'} = 1 if (!defined $opts{'-header'});
    my $file = $opts{'-file'} or ERROR("-file must be defined in function <_tsv2html>");
    my $class_name = $opts{'-class'} || "func_table";
    my $width = $opts{'-width'} || "100%";

    my $tab = "";
    open IN, $file or die "$file $!";
    my $ncol = 0;

    if ($opts{'-skip'}) {
        map {my $tmp = <IN>;} 1 .. $opts{'-skip'};
    }

    if ($opts{'-header'}) {
        my $header = <IN>;
        unless ($header) {
            ERROR("$file is empty, please check it !");
        }
        my @values = split /\t/, $header;
        chomp $values[-1];

        @values = &omits_some_columns(\%opts, @values);
        $ncol = scalar @values;

        @values = map {
            my $len = length $_;
            if ($opts{'-max_chars'} && $len - 4 > $opts{'-max_chars'}) {
                qq(<th class="abbrTab" data=$opts{'-max_chars'}>$_</th>);
            }
            else {
                "<th>$_</th>"
            }
        } @values;

        $tab .= "<thead><tr>" . ${[ join "", @values ]}[0] . "</tr></thead>\n"
    }

    $tab .= "<tbody>\n";

    my $i = 0;
    while (<IN>) {
        next if (/^#/);

        $i++;
        last if $i > $top;

        my @values = split /\t/;
        chomp $values[$#values];
        @values = &omits_some_columns(\%opts, @values);
        if ($ncol && $ncol != $#values + 1) {
            ERROR("the number of columns is not equals to the header in LINE $.", $file);
        }
        elsif (!$ncol) {
            $ncol = scalar @values;
        }

        @values = map {
            my $len = length $_;
            if ($opts{'-max_chars'} && $len - 4 > $opts{'-max_chars'}) {
                qq(<td class="abbrTab" data=$opts{'-max_chars'}>$_</td>);
            }
            else {
                "<td>$_</td>";
            }
        } @values;

        $tab .= "<tr>" . ${[ join "", @values ]}[0] . "</tr>\n";
    }
    close IN;

    $tab .= "</tbody>\n";

    my $tab_html = <<HTML;
<table class="$class_name nowrap" width="$width">
    $tab 
</table>
<br />
HTML

    return $tab_html;
}

sub div_pack {
    my $class = shift;
    my @objs = @_;
    my @divs = map {"<div>$_</div>"} @objs;
    return ${[ join "", @divs ]}[0];
}

#  create a vertical slides which can contains anything
sub any2vertab {
    my ($class, $main_div, %opts) = @_;

    my $title = $class->title(%opts);
    my $names = $opts{'-names'} or ERROR("-names must be defined in function <any2vertab>");
    my @names_li = map {"<li>$_</li>"} @$names;
    my $names_li = join "\n", @names_li;

    my $resp_tabs_cnt = $class->{parent}->{resp_vtabs_cnt};
    $class->{parent}->{resp_vtabs_cnt}++;

    my $html = <<HTML;
<div id="parentVerticalTab$resp_tabs_cnt" class="VerticalTab">
    <ul id="resp-vtabs-list$resp_tabs_cnt" class="resp-tabs-list hor_$resp_tabs_cnt">
$names_li
    </ul>
    <div id="resp-vtabs-container$resp_tabs_cnt" class="resp-tabs-container hor_$resp_tabs_cnt">
$main_div
    </div>
    $title
</div>
<br />
HTML

    $opts{'-return'} ? return $html : $class->add_html($html);
}

# create a horizontal sildes which can contains anything
sub any2hontab {
    my ($class, $main_div, %opts) = @_;
    my $title = $class->title(%opts);
    my $names = $opts{'-names'} or ERROR("-names must be defined in function <any2hontab>");
    my @names_li = map {"<li>$_</li>"} @$names;
    my $names_li = join "\n", @names_li;

    my $resp_tabs_cnt = $class->{parent}->{resp_htabs_cnt};
    $class->{parent}->{resp_htabs_cnt}++;

    my $html = <<HTML;
<div id="parentHorizontalTab$resp_tabs_cnt" class="HorizontalTab">
    <ul id="resp-htabs-list$resp_tabs_cnt" class="resp-tabs-list hor_$resp_tabs_cnt">
$names_li
    </ul>
    <div id="resp-htabs-container$resp_tabs_cnt" class="resp-tabs-container hor_$resp_tabs_cnt">
$main_div
    </div>
    $title
</div>
<br />
HTML

    $opts{'-return'} ? return $html : $class->add_html($html);
}

# 
sub any2child_vtab {
    my ($class, $main_div, %opts) = @_;

    my $title = $class->title(%opts);
    my $names = $opts{'-names'} or ERROR("-names must be defined in function <any2child_vtab>");
    my @names_li = map {"<li>$_</li>"} @$names;
    my $names_li = join "\n", @names_li;

    my $child_tabs_cnt = $class->{parent}->{child_vtabs_cnt};
    $class->{parent}->{child_vtabs_cnt}++;

    my $html = <<HTML;
<div id="ChildVerticalTab$child_tabs_cnt" class="VerticalTab">
    <ul id="child-vtabs-list$child_tabs_cnt" class="resp-tabs-list ver_$child_tabs_cnt">
$names_li
    </ul>
    <div id="child-vtabs-container$child_tabs_cnt" class="resp-tabs-container ver_$child_tabs_cnt">
$main_div
    </div>
    $title
</div>
<br />
HTML

    return $html;
}

# push images to json
sub imgs_into_json {
    my ($class, %opts) = @_;

    my $images = $opts{'-files'} or die "-files must be set in function <imgs_into_json>";
    my $resp_tabs_cnt = $opts{'-order'} or die "the resp_tabs_cnt must be set in function <imgs_into_json>";
    my $type = $opts{'-type'} || "parentHorizontalTab";

    my %funcs = ("parentHorizontalTab" => "addParentHorPic",
        "parentVerticalTab"            => "addParentVerPic",
        "ChildHorticalTab"             => "addChildHorPic",
        "ChildVerticalTab"             => "addChildVerPic");

    my %containers = ("parentHorizontalTab" => "phcontainer",
        "parentVerticalTab"                 => "pvcontainer",
        "ChildHorticalTab"                  => "chcontainer",
        "ChildVerticalTab"                  => "cvcontainer");

    my $container = $containers{$type} . $resp_tabs_cnt;

    $class->{parent}->{getPic} .= "\t\t\t\t$funcs{$type}(res.$container, $resp_tabs_cnt)\n";
    my $imgsrc = join ",\n", (map {qq("$_")} @$images);
    $class->{parent}->{json} .= <<JSON;
"$container":[
$imgsrc
],
JSON

}

#-------------------------------------------------------------------------------
#  combine function
#-------------------------------------------------------------------------------
# turn multi tables to html in one container
sub tsvs2html {
    my ($class, %opts) = @_;
    my $files = $opts{'-files'} or ERROR("-files must be defined in function <tsvs2html>");

    my @tabs_div = map {$class->_tsv2html(-file => $_, %opts)} @$files;

    if ($opts{'-orient'} && $opts{'-orient'} eq "vertical") {
        $class->any2vertab($class->div_pack(@tabs_div), -type => "table", %opts);
    }
    else {
        $class->any2hontab($class->div_pack(@tabs_div), -type => "table", %opts);
    }
}

sub imgs2mtxhtml {
    my ($class, %opts) = @_;

    my $rownames = $opts{'-rownames'} or ERROR("-rownames must be defined in function <imgs2mtxhtml>");
    my $colnames = $opts{'-colnames'} or ERROR("-colnames must be defined in function <imgs2mtxhtml>");
    my $files = $opts{'-files'} or ERROR("-files must be defined in function <imgs2mtxhtml>");
    my $nrow = $#$rownames + 1;
    my $ncol = $#$colnames + 1;
    my $nfile = $#$files + 1;

    ERROR "the number of image files is not enough!" if ($nrow * $ncol != $nfile);

    my @imgs_div = map {$class->_img2html(-file => $_)} @$files;
    my @child_imgs = map {
        # save images to json file for lazy load
        $class->imgs_into_json(-files => [ @$files[$_ * $nrow .. $_ * $nrow + $nrow - 1] ],
            -order                    => $class->{parent}->{child_vtabs_cnt},
            -type                     => "ChildVerticalTab") unless $class->{nonlazy};

        # create child vertical tabs 
        my @sub_img_div = @imgs_div[$_ * $nrow .. $_ * $nrow + $nrow - 1];
        my $child_div = $class->{nonlazy} ? $class->div_pack(@sub_img_div) : "";
        my $child_vtabs = $class->any2child_vtab($child_div, -names => $rownames);

        $child_vtabs;
    } 0 .. $ncol - 1;

    my $parent_img_div = $class->div_pack(@child_imgs);
    $class->any2hontab($parent_img_div, -names => $colnames, -type => "image", -name => $opts{'-name'}, -note => $opts{'-note'}, -help => $opts{'-help'});
}

#-------------------------------------------------------------------------------
# force add a page break
#-------------------------------------------------------------------------------
sub break {
    my $class = shift;
    # my $company = $class->{parent}->{company_fullname};
    # my $url = $class->{parent}->{url};
    my $split_line = <<HTML;
<p class="head">
    <hr>
</p>
<br /><br />
HTML
    my $html = <<HTML;
<div style="page-break-after:always;"></div>
$split_line
HTML
    $class->add_html($html);
}

# return the inner code of HTML object
sub innerHTML {
    my $class = shift;
    my $html = $class->{head} . $class->{main} . $class->{tail};
    return $html;
}

# add the html code to HTML object
sub add_html {
    my $class = shift;
    my $str = shift;

    my $main = $class->{main};
    $main .= $str;

    $class->{main} = $main;
}

# turn options to attributes of html tag
sub opts2attrs {
    my %opts = @_;
    my %besides = (parent => 1, help => 1, files => 1, desc => 1, pre => 1, break => 1, "page_head" => 1, check => 1);

    my @attrs = map {
        my $name = $_;
        my $val = $opts{$name};

        if (substr($name, 0, 1) eq "-") {
            $name = substr($name, 1);
        }

        if ($besides{$name}) {
            "";
        }
        elsif ($val =~ /^\d+$/) {
            "$name=$val";
        }
        else {
            qq($name="$val")
        }
    } keys %opts;

    my $attrs = join " ", @attrs;

    return $attrs;
}

# return the help code
sub help {
    my %opts = @_;
    my $html = "";

    if ($opts{'-help'}) {
        $html .= qq(<a href="src/doc/$opts{'-help'}" target="help_page" onclick="show_help();"><img src="src/image/help.png" class="help_logo"></a>);
    }

    return $html;
}

sub img_order {
    my $class = shift;

    $class->{parent}->{img_cnt}++;
    my $submenu_cnt = $class->{parent}->{submenu_cnt} - 1;
    my $order = qq(Fig <span style="color:#C0504D">$class->{parent}->{menu_cnt}-$submenu_cnt-$class->{parent}->{img_cnt}</span>);

    return $order;
}

sub tab_order {
    my $class = shift;
    $class->{parent}->{tab_cnt}++;
    my $submenu_cnt = $class->{parent}->{submenu_cnt} - 1;
    my $order = qq(Tab <span style="color:#C0504D">$class->{parent}->{menu_cnt}-$submenu_cnt-$class->{parent}->{tab_cnt}</span>);
    return $order;
}

sub omits_some_columns {
    my ($hash, @values) = @_;

    return @values unless $hash->{'-omits'};

    my @tmp = split /,/, $hash->{'-omits'};
    my @omits;
    foreach (@tmp) {
        if (/^\d+$/) {
            push @omits, [ $_, $_ ];
        }
        elsif (/(\d+)\s*[:-]\s*(\d+)/) {
            my ($start, $end) = ($1, $2);
            ERROR("the omits values defined is error, [$start > $end] !") if ($end < $start);
            push @omits, [ $start, $end ];
        }
    }

    foreach (sort {$b->[0] <=> $a->[0]} @omits) {
        my ($start, $end) = @$_;
        my $len = $end - $start + 1;

        splice(@values, $start - 1, $len, ("..."));
    }

    return @values;
}

# discard
sub check_icon {
    my $flag = shift;

    my $home = dirname(__FILE__) . "/../../";
    my %imgs = (0 => "$home/conf/image/no.png", 1 => "$home/conf/image/yes.png", 2 => "$home/conf/image/warn.png");
    return "" unless $imgs{$flag};

    my $base64 = encode_base64($imgs{$flag});
    my $str = qq(<img src="$base64">);

    return $str;
}
